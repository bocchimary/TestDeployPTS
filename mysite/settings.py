"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n4f&qhz)$16lushq)&=+k#00(p0-k^4x-@@03*bm%7s6lk1kcy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Add logging to debug OAuth issues
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
    },
}

# Detect if we're running on PythonAnywhere
import socket
hostname = socket.gethostname()
if 'pythonanywhere' in hostname.lower() or 'PythonAnywhere' in os.environ.get('USER', ''):
    # Production on PythonAnywhere
    DEBUG = False
    ALLOWED_HOSTS = ['ptsdp1.pythonanywhere.com', 'localhost', '127.0.0.1']
else:
    # Local development
    DEBUG = True
    ALLOWED_HOSTS = []

# Email Configuration for Notifications
# Choose ONE of the following backends by uncommenting the desired option:

# Option 1: Console output (prints to terminal) - Good for initial testing
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Option 2: Save emails to files (easier to view) - Good for development
# EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
# EMAIL_FILE_PATH = BASE_DIR / 'sent_emails'  # Creates a folder to save emails

# Option 3: Production SMTP - Use this for actual email sending
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Gmail SMTP Configuration (most common)
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ptstestsystememail@gmail.com'  # Replace with your Gmail address
EMAIL_HOST_PASSWORD = 'kphz qxzi qthr fskh'  # Replace with your Gmail app password
DEFAULT_FROM_EMAIL = 'ptstestsystememail@gmail.com'  # Replace with your Gmail address

# Alternative SMTP providers (uncomment to use):
# 
# Outlook/Hotmail SMTP:
# EMAIL_HOST = 'smtp-mail.outlook.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@outlook.com'
# EMAIL_HOST_PASSWORD = 'your-password'
# DEFAULT_FROM_EMAIL = 'your-email@outlook.com'
#
# Yahoo SMTP:
# EMAIL_HOST = 'smtp.mail.yahoo.com'
# EMAIL_PORT = 587 
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@yahoo.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'
# DEFAULT_FROM_EMAIL = 'your-email@yahoo.com'
#
# Custom SMTP Server:
# EMAIL_HOST = 'your-smtp-server.com'
# EMAIL_PORT = 587  # or 465 for SSL, 25 for no encryption
# EMAIL_USE_TLS = True  # or EMAIL_USE_SSL = True for port 465
# EMAIL_HOST_USER = 'your-username'
# EMAIL_HOST_PASSWORD = 'your-password'
# DEFAULT_FROM_EMAIL = 'noreply@yourdomain.com'

# Email timeout settings
EMAIL_TIMEOUT = 30  # seconds

# For testing without sending actual emails, uncomment this:
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'landing'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration - automatically detects PythonAnywhere
if 'pythonanywhere' in hostname.lower() or 'PythonAnywhere' in os.environ.get('USER', ''):
    # Production database on PythonAnywhere
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'PTSTestDeployment$pts_rc',
            'USER': 'PTSTestDeployment',
            'PASSWORD': 'your_database_password',  # You'll set this when creating the database
            'HOST': 'PTSTestDeployment.mysql.pythonanywhere-services.com',
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }
    
    # Production static/media files
    STATIC_ROOT = '/home/PTSTestDeployment/mysite/staticfiles'
    MEDIA_ROOT = '/home/PTSTestDeployment/mysite/media'
else:
    # Local development database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'pts_rc',
            'USER': 'root',
            'PASSWORD': 'root',        
            'HOST': '127.0.0.1',
            'PORT': '3306',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'landing.User'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files configuration

STATIC_URL = '/static/'

# Where 'collectstatic' will put all static files (for production)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional static files directory (for development)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # create a 'static' folder inside your project
]

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Google OAuth Settings
# OLD CREDENTIALS (NOT WORKING):
# GOOGLE_CLIENT_ID = '594772570522-p94d8dd8j0hjpt6lejrhvrm2bm8tlg8b.apps.googleusercontent.com'
# GOOGLE_CLIENT_SECRET = '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'

# CORRECTED CREDENTIALS FROM JSON:
GOOGLE_CLIENT_ID = '594772570522-p94d8dd8j0hjpt6lejrhvrm2bm8tlg8b.apps.googleusercontent.com'
GOOGLE_CLIENT_SECRET = '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'

# NEW CREDENTIALS (TO BE UPDATED LATER):
# GOOGLE_CLIENT_ID = 'YOUR_NEW_CLIENT_ID_HERE'
# GOOGLE_CLIENT_SECRET = 'YOUR_NEW_CLIENT_SECRET_HERE'

# Google OAuth Redirect URI (can be overridden for production)
GOOGLE_OAUTH_REDIRECT_URI = 'http://127.0.0.1:8000/google-callback/'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

X_FRAME_OPTIONS = 'SAMEORIGIN'

# Custom Automated Report Scheduler
# No external dependencies - uses Django's built-in features only!
AUTO_REPORTS_ENABLED = True
AUTO_REPORTS_TIME = '08:00'  # 8:00 AM Philippines time
AUTO_REPORTS_TIMEZONE = 'Asia/Manila'
AUTO_REPORTS_DAY = 0  # Monday (0=Monday, 6=Sunday)

# Simple Django authentication
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/log-in/'

# Removed allauth settings

# Removed old allauth settings - using simple OAuth now

# Cron-based Task Scheduling (Replaced Celery)
# Tasks are now handled by server cron jobs calling management commands
# See CLAUDE.md for cron setup instructions

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

