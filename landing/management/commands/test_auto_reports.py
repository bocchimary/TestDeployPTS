from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import datetime, timedelta
import pytz
from landing.models import SignatoryActivityLog, AutoGeneratedReport, User
from django.template.loader import render_to_string
import os
from django.conf import settings


class Command(BaseCommand):
    help = 'Test auto-report generation (can be run any day)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force generation even if not Monday',
        )
        parser.add_argument(
            '--signatory-id',
            type=str,
            help='Generate reports for specific signatory ID only',
        )

    def handle(self, *args, **options):
        # Get Philippine timezone
        ph_tz = pytz.timezone('Asia/Manila')
        now = datetime.now(ph_tz)
        
        # Check if today is Monday or force flag is used
        if now.weekday() != 0 and not options['force']:
            self.stdout.write(
                self.style.WARNING(
                    'Today is not Monday. Use --force to generate reports anyway.'
                )
            )
            return
        
        # Calculate last week's date range (Monday to Sunday)
        days_since_monday = now.weekday()
        start_date = now.date() - timedelta(days=days_since_monday + 7)  # Last Monday
        end_date = start_date + timedelta(days=6)  # Last Sunday
        
        self.stdout.write(f'Generating test reports for period: {start_date} to {end_date}')
        
        # Get signatories
        if options['signatory_id']:
            signatories = User.objects.filter(
                user_type='signatory',
                id=options['signatory_id']
            )
            if not signatories.exists():
                self.stdout.write(
                    self.style.ERROR(f'Signatory with ID {options["signatory_id"]} not found')
                )
                return
        else:
            signatories = User.objects.filter(user_type='signatory')
        
        total_reports_generated = 0
        
        for signatory in signatories:
            try:
                self.stdout.write(f'Processing signatory: {signatory.full_name}')
                
                # Generate reports for each type
                report_types = ['approved_forms', 'disapproved_forms', 'pending_forms']
                
                for report_type in report_types:
                    # Get activity logs for this signatory and period
                    activity_logs = SignatoryActivityLog.objects.filter(
                        signatory=signatory,
                        created_at__date__range=[start_date, end_date]
                    )
                    
                    # Filter by report type
                    if report_type == 'approved_forms':
                        activity_logs = activity_logs.filter(action_type='approve')
                    elif report_type == 'disapproved_forms':
                        activity_logs = activity_logs.filter(action_type='disapprove')
                    elif report_type == 'pending_forms':
                        activity_logs = activity_logs.filter(action_type='view')
                    
                    # Generate report even if no activities (for testing)
                    if activity_logs.exists() or options['force']:
                        # Generate PDF report
                        context = {
                            'signatory': signatory,
                            'report_type': report_type,
                            'period_type': 'weekly',
                            'start_date': start_date,
                            'end_date': end_date,
                            'activity_logs': activity_logs,
                            'total_count': activity_logs.count(),
                        }
                        
                        # Render PDF template
                        html_content = render_to_string('pdf/auto-generated-report.html', context)
                        
                        # Create file path
                        filename = f"test_auto_report_{signatory.id}_{report_type}_weekly_{start_date}_{end_date}.html"
                        file_path = os.path.join('reports', filename)
                        
                        # Save report to database
                        auto_report = AutoGeneratedReport.objects.create(
                            report_type=report_type,
                            period_type='weekly',
                            start_date=start_date,
                            end_date=end_date,
                            file_path=file_path
                        )
                        
                        # Save HTML content to file
                        reports_dir = os.path.join(settings.MEDIA_ROOT, 'reports')
                        os.makedirs(reports_dir, exist_ok=True)
                        
                        full_file_path = os.path.join(reports_dir, filename)
                        with open(full_file_path, 'w', encoding='utf-8') as f:
                            f.write(html_content)
                        
                        total_reports_generated += 1
                        self.stdout.write(
                            self.style.SUCCESS(
                                f'Generated {report_type} report for {signatory.full_name} ({activity_logs.count()} activities)'
                            )
                        )
                    else:
                        self.stdout.write(
                            self.style.WARNING(
                                f'No {report_type} activities found for {signatory.full_name}'
                            )
                        )
                        
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(
                        f'Error generating reports for {signatory.full_name}: {str(e)}'
                    )
                )
        
        self.stdout.write(
            self.style.SUCCESS(
                f'Test report generation completed! Generated {total_reports_generated} reports.'
            )
        )
        
        if total_reports_generated > 0:
            self.stdout.write(
                self.style.SUCCESS(
                    'You can now check the reports in the signatory reports tab!'
                )
            ) 